package com.personal.datamining;
import java.util.List;
import java.util.ArrayList;
import java.io.*;

class Main{
    public static void main(String[] args){
        double[] d1 ={1.1913318964218433e-05, 1.2339902366420574e-05, 1.2919161870665146e-05, 1.3137349782255114e-05, 1.3092029003506209e-05, 1.3912009385259288e-05, 1.4738869493515138e-05, 1.4823880909326753e-05, 1.4751648529503266e-05, 1.4513373374467976e-05, 1.4420706185498083e-05, 1.5022146700159412e-05, 1.4983058976879094e-05, 1.4696892331958874e-05, 1.5018316210963739e-05, 1.5120798214037937e-05, 1.4897775053717461e-05, 1.4917463466141661e-05, 1.4279627015818212e-05, 1.4032553545056154e-05, 1.4675549248214079e-05, 1.43538358697372e-05, 1.4327820573661095e-05, 1.4596797927067331e-05, 1.5016812714715602e-05, 1.5325199261237034e-05, 1.5842355811709501e-05, 1.5610378320778701e-05, 1.5868019131305899e-05, 1.5975132677275334e-05, 1.6027205317316528e-05, 1.569726564249712e-05, 1.5584148189061254e-05, 1.5464745887681731e-05, 1.5242572154810269e-05, 1.5308447071252624e-05, 1.5476889456879561e-05, 1.5581671157909633e-05, 1.5747561205005566e-05, 1.5726068951948946e-05, 1.5490196036336912e-05, 1.5662665960901124e-05, 1.5945763556552655e-05, 1.6235198972123855e-05, 1.6491778956557418e-05, 1.6514743401379356e-05, 1.6929932751200534e-05, 1.7324271228501076e-05, 1.7747840041287031e-05, 1.8037716397348701e-05, 1.8019861434887779e-05, 1.8112064943969536e-05, 1.8618072082127973e-05, 1.9017636564707831e-05, 1.9405960192183818e-05, 1.9669425508287274e-05, 1.9926768788179417e-05, 2.0241669196658612e-05, 2.0878417079269897e-05, 2.1996298646139883e-05, 2.2968088882992432e-05, 2.3963828604272362e-05, 2.5332714374469235e-05, 2.750926023509237e-05, 2.911169655054177e-05, 3.0164592179257204e-05, 2.9964126310590344e-05, 2.9710649227711527e-05, 3.0052629296863283e-05, 2.8941618138235625e-05, 2.690862753037696e-05, 2.5963302862562288e-05, 2.5139553429198713e-05, 2.491155151216974e-05, 2.478322249187061e-05, 2.4400065659132713e-05, 2.4994523958607067e-05, 2.5852140814614749e-05, 2.6504036148773074e-05, 2.7253926085839858e-05, 2.7718508054671736e-05, 2.7857426557277775e-05, 2.8581413833502927e-05, 2.9012294329991812e-05, 2.9239060787793797e-05, 2.9609157325337166e-05, 2.9576490013434003e-05, 3.0248875564861267e-05, 3.0952325435659335e-05, 3.0672551775166668e-05, 3.0757043256406693e-05, 3.1146151351484673e-05, 3.1101139094451871e-05, 3.195945862444205e-05, 3.2762571712347767e-05, 3.4205834481326747e-05, 3.6339820033910133e-05, 3.7807418802263525e-05, 3.8716769608981849e-05, 3.9616261558096865e-05, 3.9923887909156163e-05, 3.9624595014434559e-05, 3.9213354300825039e-05, 3.8012894200229698e-05, 3.7268216942720755e-05, 3.6678983600982716e-05, 3.6011662814416923e-05, 3.5905157752884929e-05, 3.5856235870466791e-05, 3.5616238700900536e-05, 3.5684724853776319e-05, 3.6955654309167585e-05, 3.9880315268549437e-05, 4.3355794023877282e-05, 4.7248475344271613e-05, 5.2635276996885037e-05, 6.0236371788440526e-05, 6.3787224316261669e-05, 6.4550607947109847e-05, 6.298914442075849e-05, 6.1937074503605664e-05, 5.8686938765666643e-05, 5.3942221581694738e-05, 4.6623983329092364e-05, 4.348297212735425e-05, 4.2638568467217351e-05, 4.2437461096207183e-05, 4.1368513539704773e-05, 4.20604386915459e-05, 4.2577548583722091e-05, 4.3083574528931687e-05, 4.3933097978359517e-05, 4.4194424698876643e-05, 4.4461579071659276e-05, 4.5295438293838485e-05, 4.5061599605235506e-05, 4.571910309485767e-05, 4.6569398201817027e-05, 4.7602390135840066e-05, 5.0829156082597494e-05, 5.7515563152524661e-05, 6.2298734617018318e-05, 6.5441365937398844e-05, 6.7035392183762649e-05, 6.7376206483718958e-05, 6.6462693309534053e-05, 6.2766578236862961e-05, 5.5795854661612664e-05, 5.0170527336896544e-05, 4.7340378143547112e-05, 4.4854532818914906e-05, 4.3880953122814912e-05, 4.2707716683513096e-05, 4.2550858860782424e-05, 4.2312230886766755e-05, 4.1905216546313439e-05, 4.1011338160907531e-05, 4.0973307461302148e-05, 4.0819341084638184e-05, 4.1281117530291211e-05, 4.1281624784720142e-05, 4.1304002414627962e-05, 4.1730577176427429e-05, 4.2248696965024078e-05, 4.2462558797394324e-05, 4.2705004797686085e-05, 4.291021031934049e-05, 4.3133074184100095e-05, 4.3220742229875342e-05, 4.2979589807146112e-05, 4.214931810305903e-05, 4.1317592669137018e-05, 4.0108379055579591e-05, 3.8878733676028787e-05, 3.779785220103804e-05, 3.6796566486633045e-05, 3.5910406105748341e-05, 3.5329882653708668e-05, 3.48628175938107e-05, 3.4503227555303192e-05, 3.4237042525221894e-05, 3.4020352749004292e-05, 3.3881794576830415e-05, 3.3512920643780877e-05, 3.3450984964084849e-05, 3.3395220108494481e-05, 3.3454941006181927e-05, 3.3528430159484355e-05, 3.3487506340991657e-05, 3.3207010834043361e-05, 3.3207074401226624e-05, 3.3137458071256075e-05, 3.2985228894436401e-05, 3.272722100129093e-05, 3.2559370603329239e-05, 3.2559541945634661e-05, 3.2853671460283552e-05, 3.3221269859495806e-05, 3.3262874997793304e-05, 3.3404126406821887e-05, 3.3718754195888323e-05};
        double[] d2 = {0.00034751902833818349, 0.00035507311820310862, 0.00036131656920209326, 0.00036056466460974789, 0.00036503071506948406, 0.00036791416234141906, 0.00034837747809238602, 0.00034978211973728842, 0.00033710683036198522, 0.0003282455936966601, 0.00031999880950804382, 0.00033471706663996362, 0.00033955142388159796, 0.00033735064718192523, 0.00034694864096504067, 0.00035833877476371915, 0.00035032409365547726, 0.00035343840655903999, 0.0003294764529105773, 0.00031653039923185133, 0.00032158251428882062, 0.00029964724862046357, 0.00028520372128631219, 0.00028955460147374524, 0.00028852749137188639, 0.00029480118835830836, 0.0003021526430789631, 0.00028917310523216396, 0.00029069420075497225, 0.00028987434734517592, 0.00028298153438299778, 0.00027577958949872742, 0.00027158039688401914, 0.0002699219675962792, 0.00027762505315617346, 0.00028078955902596401, 0.0002820452946577591, 0.00028637625817801957, 0.00028903970217340562, 0.00028430179512335077, 0.00027405139206036565, 0.00027476414805148252, 0.00028055100291827075, 0.00028522667292106362, 0.00029084313155181002, 0.0002913493115751667, 0.00029828386794049171, 0.00030436071447833716, 0.00030399841537993258, 0.00030428954866173233, 0.00030255683129455847, 0.00030256394367305408, 0.00030710831158233171, 0.00031178165636447375, 0.00031608109884473373, 0.00031895992560748709, 0.00031636591263252607, 0.00031557548956178446, 0.00031477737521916945, 0.00031746258420233578, 0.00032055004742557818, 0.00032728259540298107, 0.00032992589019288838, 0.00034555415335749525, 0.00034785446268870146, 0.00034826659072807937, 0.00034137936297286482, 0.00033163938834539816, 0.00032426308319242841, 0.00031414433906970122, 0.00029258903568266499, 0.00028813299140243288, 0.00028450599844680776, 0.00028360845392074097, 0.00028782901267732086, 0.00028358055919852632, 0.00028994638731611697, 0.00030177953119294088, 0.00030460851998473766, 0.00030555580068331831, 0.00030484224726023973, 0.0003032828775368606, 0.00030452820569085555, 0.00030302504124587619, 0.00029883314566957002, 0.00030034803343629131, 0.00030093098907205525, 0.00030880816439093911, 0.00030753868551463317, 0.00030547530975257232, 0.00030407146745606696, 0.00030417203976997243, 0.00030368962169242356, 0.00030091837551741004, 0.00029595738867880888, 0.00030073817785185899, 0.00031111705535684972, 0.00031996800092721448, 0.00032229601639041254, 0.00032403268093211021, 0.00032549611426345242, 0.00033028405180500286, 0.0003306811157537075, 0.00032365015204049996, 0.00031558346430366716, 0.00031064717089585817, 0.00030674675544365272, 0.00030658293069661468, 0.00029780529751276068, 0.00029016491950122666, 0.00028707203585197149, 0.00029598482196239014, 0.00033218507006235352, 0.00036789444353806696, 0.00040788925314570539, 0.00048142945492405227, 0.00055012391382141298, 0.0005901010660116819, 0.00062034728625803837, 0.00061599115757157317, 0.00060589406010486916, 0.00058512828341658217, 0.00053155106771945223, 0.0004805105676756024, 0.00046145357795726984, 0.0004440283706311935, 0.00043171855960671171, 0.00042823491529426453, 0.0004316294794729661, 0.00043489276744626939, 0.00044127315433278061, 0.00044754570801939863, 0.00045158522042194297, 0.00045762086847389588, 0.00046091824463344116, 0.00045933084701183749, 0.00047231849014549103, 0.00049014799943896444, 0.00050970603979294538, 0.00054643725369325172, 0.00060717345604643924, 0.00066324587773384082, 0.00071013625262951658, 0.00072744884190407381, 0.00073063779479655617, 0.00072084177379240695, 0.00069141905234053932, 0.0006351751922660956, 0.00058244866288857471, 0.00054462005456506243, 0.00052020298841983154, 0.00050462567469367059, 0.00049332717110571272, 0.00048244761923602449, 0.00047456956625475347, 0.00046399037887567829, 0.00045301704923466398, 0.00044856263311235774, 0.00044145272230317848, 0.00043600548337963119, 0.00043271610154858658, 0.00043190119442572595, 0.00043655319333473538, 0.00043859455601185412, 0.00044002653658026247, 0.00044155551206261279, 0.00044266564184779005, 0.00044428548176256299, 0.0004420445423290533, 0.00043654095238058029, 0.00042692378880409323, 0.00041584181014643813, 0.00040282307668348949, 0.00038893619336834363, 0.00037426662726959748, 0.00036262566988755547, 0.00035164453090276638, 0.00034394202628261283, 0.00033721011758253947, 0.00033232544930277593, 0.00032797863341979143, 0.00032744769506669921, 0.00032616700455686702, 0.00032401311234155268, 0.00032362043780917053, 0.00032424586122812925, 0.00032528434196267753, 0.00032585493899465031, 0.00032567595761585319, 0.00032369131843422243, 0.00032335714822043622, 0.00032170866763538337, 0.00031922686048346804, 0.00031744872772573478, 0.0003173360314576712, 0.00031620377649232978, 0.00031721796329163359, 0.00031887742248467736, 0.00032014929642324813, 0.00032153290267160621, 0.00032190248447250269
        };
        CorHierarchet ch = new CorHierarchet(d1,d2);
        ch.calStufeOne(2);
        List<ArrayList<Double>> st = ch.getStufeOne();
        System.out.println("Size of data is: "+ ch.getSizeOfData());
    
        try{
            FileWriter writer = new FileWriter("/Users/ihuangyiran/Documents/Workplace_Maven/CorrelationWindow/data/war2.data");
            for(double i=0.99; i>0.75 ; i-=0.01){
                System.out.println("###################################");
                System.out.println("#threshold is "+i);
                System.out.println("###################################");
                st = ch.calStufeNext(st, i);
                ch.showStufe(st);
                System.out.println("");
                System.out.println("----------------");
                System.out.println("**the longest window in this stufe is:**");
                ch.showItem(ch.getLongestWindowInStufe(st));
                
                //output
                ArrayList<Double> itemL = ch.getLongestWindowInStufe(st);
                double timeStemp = itemL.get(2) - itemL.get(1);
                double cor = itemL.get(0);
                writer.write(cor+","+timeStemp);
                writer.write("\n");
            }
            writer.close();
        }catch(Exception e){
            e.printStackTrace();
        }
        System.out.println("########################");
        System.out.println("#The best Item is:");
        System.out.println("########################");
        ch.showItem(ch.getBestCW());

    }
}
